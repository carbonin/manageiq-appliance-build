# Set up the network interface however it wants to be named
%pre --log=/root/anaconda-pre.log
interface=`ip a | grep -i broadcast | sed 's/^.*: \(.*\): .*/\1/'`
echo "network --device $interface --onboot yes --bootproto dhcp" > /tmp/miq-device-conf.ks
cat /tmp/miq-device-conf.ks >> /root/network-device-ks-line
ip a >> /root/network-device-ks-line
%end

# Kickstart file automatically generated by anaconda.
# Run the text based installer to see dependency info in screenshots
logging --level=debug

#version=DEVEL
install
cdrom

<%= render_partial "main/repos" %>

lang en_US.UTF-8
keyboard us
%include /tmp/miq-device-conf.ks
rootpw  --iscrypted $1$DZprqvCu$mhqFBjfLTH/PVvZIompVP/

authconfig --enableshadow --passalgo=sha512
selinux --enforcing
timezone --utc America/New_York

device mptbase
device mptscsih
device mptspi

bootloader --location=mbr --driveorder=vda --append="crashkernel=auto rhgb quiet"

<%= render_partial "main/disk_layout" %>
<%= render_partial "main/db_fs" %>

reboot

%packages
@base --nodefaults
@server-policy --nodefaults
@development tools

<%= render_partial "packages/includes" %>
<%= render_partial "packages/excludes" %>

%end

%post --log=/root/anaconda-post.log

exec < /dev/tty3 > /dev/tty3
chvt 3
set -x

# For some reason, DEBUG is set but empty in the kickstart.
# Unset it so ruby_parser doesn't print LOTS of output.
unset DEBUG

echo "in post" >> /root/network-device-ks-line
ip a >> /root/network-device-ks-line

<%= render_partial "post/firewalld" %>

<%= render_partial "post/source_setup" %>

<%= render_partial "post/repos" %>

<%= render_partial "post/ruby_install" %>

<%= render_partial "post/bundler" %>

# appliance_root="/opt/manageiq/manageiq-appliance" -- in post/source_setup partial
$appliance_root/cfme-setup.sh

<%= render_partial "post/systemd" %>

<%= render_partial "post/db_init" %>

# make sure we have the device name in all ifcfg-* files
ls /etc/sysconfig/network-scripts/ifcfg-* | while read FILE
do
  # parse the device name from FILE
  DEVICE=${FILE##*-}
  grep -q 'DEVICE=' $FILE || echo "DEVICE=$DEVICE" >> $FILE
done

# make sure there is a new line at the end of sshd_config
echo "" >> /etc/ssh/sshd_config

# Let's rebuild the ramfs with with base scsi drivers we need
kversion=$(rpm -q kernel --qf '%{version}-%{release}.%{arch}\n')
ramfsfile="/boot/initramfs-$kversion.img"
/sbin/dracut --force --add-drivers "mptbase mptscsih mptspi<%= " hv_storvsc hid_hyperv hv_netvsc hv_vmbus" if @target == "hyperv" %>" $ramfsfile $kversion

chvt 1
%end
